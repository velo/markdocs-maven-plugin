<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.15-->

<plugin>
  <name>easy-jacoco-maven-plugin</name>
  <description>This project aims at making jacoco easy on modular projects.

Runs all things a project need on all modules automatically.
All modules will prepare (for unit and integrationtests)
All modules will report (for unit and integrationtests)
All modules can be checked (for unit and integrationtests)

So far, all things you can do on parent pom, with a few lines.

The juicy bits:

PROJECT wide coverage report (aka report-aggregate) with zero configuration
PROJECT wide coverage check, so you can requite the whole project to have 70% code coverage</description>
  <groupId>com.marvinformatics.jacoco</groupId>
  <artifactId>easy-jacoco-maven-plugin</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <goalPrefix>easy-jacoco</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <requiredJavaVersion>11</requiredJavaVersion>
  <requiredMavenVersion>3.9.9</requiredMavenVersion>
  <mojos>
    <mojo>
      <goal>check-project</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>com.marvinformatics.easyjacoco.ProjectCheckMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>dataFileExcludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of execution data files to exclude from coverage analysis. Supports wildcards. 
Default: None.
</description>
        </parameter>
        <parameter>
          <name>dataFileIncludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of execution data files to include for coverage analysis. Supports wildcards. 
Default: All *.exec files in target directories.
</description>
        </parameter>
        <parameter>
          <name>excludeModules</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of module artifactIds to exclude from the coverage check. 
Default: None.
</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of class files to exclude from the coverage check. Supports wildcards. 
Default: None.
</description>
        </parameter>
        <parameter>
          <name>haltOnFailure</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>Whether to halt the build if the coverage check fails. 
Default: false (warn only).
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in coverage check. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>projectRules</name>
          <type>java.util.List</type>
          <since>0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Check configuration used to specify rules on element types (BUNDLE, PACKAGE, CLASS, SOURCEFILE or METHOD) along with limits. Each limit applies to a specific counter (INSTRUCTION, LINE, BRANCH, COMPLEXITY, METHOD, CLASS) and defines a minimum or maximum for the corresponding metric (TOTALCOUNT, COVEREDCOUNT, MISSEDCOUNT, COVEREDRATIO, MISSEDRATIO). 
If not specified, JaCoCo defaults are used:

* Element: BUNDLE 
* Counter: INSTRUCTION with minimum COVEREDRATIO of 0.80 and CLASS with maximum MISSEDCOUNT of 0 
For example, to enforce a minimum of 70% line coverage for the entire project (bundle), configure:
&lt;projectRules&gt; &lt;rule&gt; &lt;element&gt;BUNDLE&lt;/element&gt; &lt;limits&gt; &lt;limit&gt; &lt;counter&gt;LINE&lt;/counter&gt; &lt;value&gt;COVEREDRATIO&lt;/value&gt; &lt;minimum&gt;0.70&lt;/minimum&gt; &lt;/limit&gt; &lt;/limits&gt; &lt;/rule&gt; &lt;/projectRules&gt; </description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>false</required>
          <editable>false</editable>
          <description>Maven session object provided by the Maven runtime.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution of the check-project goal. 
Default: false.
</description>
        </parameter>
      </parameters>
      <configuration>
        <haltOnFailure implementation="boolean" default-value="false">${jacoco.haltOnFailure}</haltOnFailure>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${easyjacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on easy-jacoco-maven-plugin. 
Call mvn easy-jacoco:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.marvinformatics.jacoco.easy_jacoco_maven_plugin.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>instrument-jar</goal>
      <description>Maven Mojo for instrumenting jar files by injecting JaCoCo probe instructions to enable offline code coverage analysis. 
This goal, named &quot;instrument-jar&quot;, is executed during the package phase. It reads a specified source file (or jar), applies offline instrumentation using JaCoCo, and writes the resulting instrumented file to the provided destination.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>com.marvinformatics.easyjacoco.InstrumentJarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>destination</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The target file for the instrumented output.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of class files to exclude from the coverage check. Supports wildcards. 
Default: None.
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in coverage check. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>When set to true, instrumentation will be skipped.</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The source file (or JAR) that will be instrumented.</description>
        </parameter>
      </parameters>
      <configuration>
        <destination implementation="java.io.File">${easyjacoco.destination}</destination>
        <skip implementation="boolean" default-value="false">${easyjacoco.skip}</skip>
        <source implementation="java.io.File">${easyjacoco.source}</source>
      </configuration>
    </mojo>
    <mojo>
      <goal>persist-report-project</goal>
      <description>Internal class, only used to save coverage project pom.xml to disk</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>com.marvinformatics.easyjacoco.PersistProjectForReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>mavenVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>projectDescription</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>projectExtraProperties</name>
          <type>java.util.Properties</type>
          <required>false</required>
          <editable>true</editable>
          <description>Only used by EasyJacocoLifecycleParticipant</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>reportArtifactId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>reportGroupId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>reportVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip execution of the mojo. Can be set via -Deasyjacoco.skip=true</description>
        </parameter>
      </parameters>
      <configuration>
        <mavenVersion implementation="java.lang.String" default-value="${maven.version}"/>
        <projectDescription implementation="java.lang.String">${easyjacoco.report.description}</projectDescription>
        <projectName implementation="java.lang.String">${easyjacoco.report.name}</projectName>
        <reportArtifactId implementation="java.lang.String">${easyjacoco.reportArtifactId}</reportArtifactId>
        <reportGroupId implementation="java.lang.String">${easyjacoco.reportGroupId}</reportGroupId>
        <reportVersion implementation="java.lang.String">${easyjacoco.reportVersion}</reportVersion>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${easyjacoco.skip}</skip>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.model.io.ModelWriter</role>
          <field-name>modelWriter</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>report-project</goal>
      <description>Generates an aggregated coverage report for the entire project by merging execution data from all modules. 
This goal is automatically bound to the verify phase and produces a report in multiple formats (HTML, XML, CSV) placed in the directory defined by ${project.reporting.outputDirectory}/jacoco-aggregate. It works similarly to the JaCoCo report-aggregate mojo, but without requiring a separate aggregator project or manual dependency management.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>com.marvinformatics.easyjacoco.ProjectReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>dataFileExcludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of execution data files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>dataFileIncludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of execution data files to include in the report from each project. May use wildcard characters (* and ?). When not specified all *.exec files from the target folder will be included.</description>
        </parameter>
        <parameter>
          <name>excludeModules</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of modules/projects to exclude from the report. Must match the module artifactId. When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Footer text used in HTML report pages.</description>
        </parameter>
        <parameter>
          <name>formats</name>
          <type>java.util.List</type>
          <since>0.8.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of report formats to generate. Supported formats are HTML, XML and CSV. Defaults to all formats if no values are given.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in the report. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory for the reports. Note that this parameter is only relevant if the goal is run from the command line or from the default build lifecycle. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the generated reports.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip execution of the mojo. Can be set via -Deasyjacoco.skip=true</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the source files.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the root node HTML report pages.</description>
        </parameter>
      </parameters>
      <configuration>
        <formats implementation="java.util.List" default-value="HTML,XML,CSV"/>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/jacoco-project-report"/>
        <outputEncoding implementation="java.lang.String" default-value="UTF-8">${project.reporting.outputEncoding}</outputEncoding>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${easyjacoco.skip}</skip>
        <sourceEncoding implementation="java.lang.String" default-value="UTF-8">${project.build.sourceEncoding}</sourceEncoding>
        <title implementation="java.lang.String" default-value="${project.name}"/>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>4.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.core</artifactId>
      <type>jar</type>
      <version>0.8.13</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>9.8</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-commons</artifactId>
      <type>jar</type>
      <version>9.8</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-tree</artifactId>
      <type>jar</type>
      <version>9.8</version>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.report</artifactId>
      <type>jar</type>
      <version>0.8.13</version>
    </dependency>
  </dependencies>
</plugin>